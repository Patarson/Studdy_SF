                                        #НАБОРЫ - МНОЖЕСТВА (SET)

#Набор это неупорядочная последовательность элементов.Наборы изменияемые,можно удалять и добавлять данные.
#Обычно в наборах сохраняют однотипные данные.
#Структура и синтаксис:

# my_fruits = {'apple', 'orange', 'lime'}
#
# posts_ids = {124, 54, 23, 534}
#
# user_input = {True, 'hi!', 'smile', 1.5} # В наборе могут быть обьекты разных типов.Зачастую так не делают.

# my_set = set()  # Синтаксис создания пустого набора

                                #Порядок не имеет значения
                             #У элементов набора нету индекса

# posts_ids = {10, 50, 20, 23}
# posts_ids.add(5)          # Добавляет в набор новый элемент
# print(posts_ids)

                            #.del в наборах нельзя использовать

# my_set = {(10, 10), 5, 15, 15}  #Дубликаты с наборов удаляются
# print(my_set)
# print(len(my_set))
#
# new_set = set() #Синтаксис для создания пустого набора

                            # Методы наборов

                           #Объединение  множеств
# my_set = {1, 53, 32}
# other_set = {33, 3, 53}
# all_sets = my_set.union(other_set)#Обьединяет два множества и удаляет дубликаты.Вместо .union можно использовать |
# # print(all_sets) # Проверяем

                         #   Пересечение двух наборов

# my_set = {1, 53, 32}
# other_set = {33, 3, 53}
# all_sets = my_set & other_set # Находим элемент персечения наборов - .intersection(Второй набор) или &
# # print(all_sets)
# nums = {10, 5, 35}
# other_nums = {20, 5, 12, 10, 35}
# res = nums.issubset(other_nums) #.issubset Проверяет включен ли один набор в другой
# print(res) #True

# my_set = {'abc', 'd', 'f', 'y'}
# # other_set = {'a', 'f', 'd'}
# # print(my_set.intersection(other_set)) # Общее из двух наборов,порядок наборов не важен

# # print(my_set.intersection('abcd')) #При вызове метода можно передать любую последовательность.Можно передать строку,список и даже кортеж

# # print(my_set.union(other_set))#Обьединяем наборы в один

# # print(other_set.issubset(my_set))# Проверяем пересечение сетов

# # print(my_set.issuperset(other_set)) #Проверяем является ли подсетом главного набора ==

# # print(my_set.difference(other_set)) # Показывает разницу между наборами.Объявляется ещё оператором '-'

# # print(my_set.discard('d')) #Удаляет обьект из набора и возвращет None

# # print(my_set) #Выводим измененный набор в терминал

# copied_set = my_set.copy() #Копируем один набор и из него создаем второй

# my_set.add('t',) #В первый добавляем новый элемент

# copied_set.add('l')# Во второй добавляем новый элемент
#
# print(my_set)
# print(copied_set) #Выводим оба в терминал и видим что это 2 совершенно разных и независимых друг от друга набора

# print(copied_set.symmetric_difference(my_set)) #C помощью данного метода получаем различия между наборами

#                                           #Задача
# my_set = {32, 534, 234} # Создаем набор из нескольких элементов
# my_set.add(92) # Добавялем в него новый элемент
# other_set = {32, 92, 726, 892} # Создаем второй набор с некоторыми похожими элементами
# third_set = my_set.intersection(other_set) # Проверяем наборы на схожесть элементов и создаём новый набор
# set_in_list = list(third_set) # Конвертируем набор в список
#
# print(third_set)
# print(set_in_list)
